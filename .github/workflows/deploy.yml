name: Deploy to EKS on Push

on:
  push:
    branches:
      - main
      - develop
  release:
    types:
      - released

env:
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: bullpawn-dev
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    strategy:
      fail-fast: false
      matrix:
        service:
          - name: backend
            dockerfile: ./backend/Dockerfile
            build-context: ./backend
            ecr-repo: bullpawn-dev-backend
          - name: frontend
            dockerfile: ./frontend/Dockerfile
            build-context: ./frontend
            ecr-repo: bullpawn-dev-frontend
          - name: contracts
            dockerfile: ./contracts/Dockerfile
            build-context: ./contracts
            ecr-repo: bullpawn-dev-contracts
    
    outputs:
      tag: ${{ steps.set-outputs.outputs.tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set environment and tag
      id: set-env
      run: |
        # Get commit date (year and day of year)
        COMMIT_DATE=$(git log -1 --format=%cd --date=format:%Y%j ${{ github.sha }})
        # Get short commit hash
        COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-8)
        
        if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "ENVIRONMENT=development" >> $GITHUB_ENV
          echo "IMAGE_TAG=develop-${COMMIT_DATE}-${COMMIT_HASH}" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "IMAGE_TAG=prod-${COMMIT_DATE}-${COMMIT_HASH}" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=development" >> $GITHUB_ENV
          echo "IMAGE_TAG=pr-${COMMIT_DATE}-${COMMIT_HASH}" >> $GITHUB_ENV
        fi

    - name: Build, tag, and push ${{ matrix.service.name }} image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
        ECR_REPOSITORY: ${{ matrix.service.ecr-repo }}
        DOCKERFILE: ${{ matrix.service.dockerfile }}
        BUILD_CONTEXT: ${{ matrix.service.build-context }}
      run: |
        echo "Building ${{ matrix.service.name }} image..."
        echo "Dockerfile: $DOCKERFILE"
        echo "Build context: $BUILD_CONTEXT"
        echo "ECR Repository: $ECR_REPOSITORY"
        echo "Image Tag: $IMAGE_TAG"
        
        # Verify dockerfile exists
        if [ ! -f "$DOCKERFILE" ]; then
          echo "❌ Dockerfile not found: $DOCKERFILE"
          ls -la
          exit 1
        fi
        
        # Build the image
        echo "Starting Docker build..."
        if ! docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKERFILE $BUILD_CONTEXT; then
          echo "❌ Docker build failed for ${{ matrix.service.name }}"
          exit 1
        fi
        
        echo "Pushing image to ECR..."
        if ! docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG; then
          echo "❌ Failed to push ${{ matrix.service.name }} image to ECR"
          exit 1
        fi
        
        echo "Tagging and pushing latest..."
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        if ! docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest; then
          echo "❌ Failed to push ${{ matrix.service.name }} latest tag to ECR"
          exit 1
        fi
        
        echo "✅ ${{ matrix.service.name }} image pushed with both tags: $IMAGE_TAG and latest"

    - name: Set outputs
      id: set-outputs
      if: matrix.service.name == 'backend'
      run: |
        echo "tag=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

  # deploy-development:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
  #   needs:
  #     - build-and-push
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Update kubeconfig
  #       run: |
  #         aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

  #     - name: Set up Helm
  #       uses: azure/setup-helm@v4.3.0
  #       with:
  #         version: 'v3.18.6'

  #     - name: Install Helm Diff plugin
  #       run: helm plugin install https://github.com/databus23/helm-diff --version 3.13.0

  #     - name: Install Helmfile
  #       run: |
  #         curl -L https://github.com/helmfile/helmfile/releases/download/v0.155.0/helmfile_0.155.0_linux_amd64.tar.gz | tar xz
  #         sudo mv helmfile /usr/local/bin/

  #     - name: Change directory
  #       run: |
  #         cd deploy/helm

  #     - name: Run helmfile apply for development
  #       run: |
  #         INPUT_VALUES="--state-values-set=backend.image.repository=${{ needs.build-and-push.outputs.backend-image }} --state-values-set=frontend.image.repository=${{ needs.build-and-push.outputs.frontend-image }} --state-values-set=contracts.image.repository=${{ needs.build-and-push.outputs.contracts-image }}"
  #         helmfile --environment development --namespace bullpawn-development $INPUT_VALUES apply --wait

  # deploy-staging:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   needs:
  #     - build-and-push
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Update kubeconfig
  #       run: |
  #         aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

  #     - name: Set up Helm
  #       uses: azure/setup-helm@v4.3.0
  #       with:
  #         version: 'v3.18.6'

  #     - name: Install Helm Diff plugin
  #       run: helm plugin install https://github.com/databus23/helm-diff --version 3.13.0

  #     - name: Install Helmfile
  #       run: |
  #         curl -L https://github.com/helmfile/helmfile/releases/download/v0.155.0/helmfile_0.155.0_linux_amd64.tar.gz | tar xz
  #         sudo mv helmfile /usr/local/bin/

  #     - name: Change directory
  #       run: |
  #         cd deploy/helm

  #     - name: Deploy sealed secrets
  #       run: |
  #         for file in ./sealed-secrets/staging/sealed-*.yaml; do
  #           kubectl apply -f "$file"
  #         done

  #     - name: Run helmfile apply for staging
  #       run: |
  #         INPUT_VALUES="--state-values-set=backend.image.repository=${{ needs.build-and-push.outputs.backend-image }} --state-values-set=frontend.image.repository=${{ needs.build-and-push.outputs.frontend-image }} --state-values-set=contracts.image.repository=${{ needs.build-and-push.outputs.contracts-image }}"
  #         helmfile --environment staging --namespace bullpawn-staging $INPUT_VALUES apply --wait

  deploy-production:
    runs-on: ubuntu-latest
    # if: github.event_name == 'release' && github.event.action == 'released' && github.event.release.target_commitish == 'main'
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs:
      - build-and-push
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          echo "Updating kubeconfig..."
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }} --verbose
          
      - name: Verify kubectl connection
        run: |
          echo "Testing kubectl connection..."
          kubectl config current-context
          kubectl get ns

      - name: Set up Helm
        uses: azure/setup-helm@v4.3.0
        with:
          version: 'v3.18.6'

      - name: Install Helm Diff plugin
        run: helm plugin install https://github.com/databus23/helm-diff --version 3.13.0

      - name: Install Helmfile
        run: |
          curl -L https://github.com/helmfile/helmfile/releases/download/v0.155.0/helmfile_0.155.0_linux_amd64.tar.gz | tar xz
          sudo mv helmfile /usr/local/bin/

      - name: Run helmfile apply for production
        run: |
          cd deploy/helm
          # Get the ECR registry URL from AWS
          ECR_REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          echo "ECR Registry: $ECR_REGISTRY"
          
          INPUT_VALUES="--state-values-set=backend.image.repository=$ECR_REGISTRY/bullpawn-dev-backend --state-values-set=backend.image.tag=${{ needs.build-and-push.outputs.tag }} --state-values-set=frontend.image.repository=$ECR_REGISTRY/bullpawn-dev-frontend --state-values-set=frontend.image.tag=${{ needs.build-and-push.outputs.tag }} --state-values-set=contracts.image.repository=$ECR_REGISTRY/bullpawn-dev-contracts --state-values-set=contracts.image.tag=${{ needs.build-and-push.outputs.tag }}"
          echo "Running helmfile from directory: $(pwd)"
          echo "Helmfile command: helmfile --environment production --namespace bullpawn-production $INPUT_VALUES apply --wait"
          helmfile --environment production --namespace bullpawn-production $INPUT_VALUES apply --wait

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.backend-image }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'