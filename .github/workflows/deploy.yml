name: Deploy to EKS on Push

on:
  push:
    branches:
      - main
      - develop
  release:
    types:
      - released

env:
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: bullpawn-dev
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
      contracts-image: ${{ steps.contracts-meta.outputs.tags }}
      tag: ${{ steps.tag.outputs.tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set environment
      id: set-env
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "ENVIRONMENT=development" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
        fi

    # Backend Docker build and push
    - name: Docker meta for backend
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.ECR_REGISTRY }}/bullpawn-dev-backend
        tags: |
          type=sha,event=pr
          type=sha,event=branch
          type=semver,pattern={{version}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Frontend Docker build and push
    - name: Docker meta for frontend
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.ECR_REGISTRY }}/bullpawn-dev-frontend
        tags: |
          type=sha,event=pr
          type=sha,event=branch
          type=semver,pattern={{version}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Contracts Docker build and push
    - name: Docker meta for contracts
      id: contracts-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.ECR_REGISTRY }}/bullpawn-dev-contracts
        tags: |
          type=sha,event=pr
          type=sha,event=branch
          type=semver,pattern={{version}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push contracts image
      uses: docker/build-push-action@v5
      with:
        context: ./contracts
        push: true
        tags: ${{ steps.contracts-meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - id: tag
      run: |
        echo "tag=${{ fromJSON(steps.backend-meta.outputs.json).labels['org.opencontainers.image.version'] }}" >> $GITHUB_OUTPUT

  # deploy-development:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
  #   needs:
  #     - build-and-push
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Update kubeconfig
  #       run: |
  #         aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

  #     - name: Set up Helm
  #       uses: azure/setup-helm@v4.3.0
  #       with:
  #         version: 'v3.18.6'

  #     - name: Install Helm Diff plugin
  #       run: helm plugin install https://github.com/databus23/helm-diff --version 3.13.0

  #     - name: Install Helmfile
  #       run: |
  #         curl -L https://github.com/helmfile/helmfile/releases/download/v0.155.0/helmfile_0.155.0_linux_amd64.tar.gz | tar xz
  #         sudo mv helmfile /usr/local/bin/

  #     - name: Change directory
  #       run: |
  #         cd deploy/helm

  #     - name: Run helmfile apply for development
  #       run: |
  #         INPUT_VALUES="--state-values-set=backend.image.repository=${{ needs.build-and-push.outputs.backend-image }} --state-values-set=frontend.image.repository=${{ needs.build-and-push.outputs.frontend-image }} --state-values-set=contracts.image.repository=${{ needs.build-and-push.outputs.contracts-image }}"
  #         helmfile --environment development --namespace bullpawn-development $INPUT_VALUES apply --wait

  # deploy-staging:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   needs:
  #     - build-and-push
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Update kubeconfig
  #       run: |
  #         aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

  #     - name: Set up Helm
  #       uses: azure/setup-helm@v4.3.0
  #       with:
  #         version: 'v3.18.6'

  #     - name: Install Helm Diff plugin
  #       run: helm plugin install https://github.com/databus23/helm-diff --version 3.13.0

  #     - name: Install Helmfile
  #       run: |
  #         curl -L https://github.com/helmfile/helmfile/releases/download/v0.155.0/helmfile_0.155.0_linux_amd64.tar.gz | tar xz
  #         sudo mv helmfile /usr/local/bin/

  #     - name: Change directory
  #       run: |
  #         cd deploy/helm

  #     - name: Deploy sealed secrets
  #       run: |
  #         for file in ./sealed-secrets/staging/sealed-*.yaml; do
  #           kubectl apply -f "$file"
  #         done

  #     - name: Run helmfile apply for staging
  #       run: |
  #         INPUT_VALUES="--state-values-set=backend.image.repository=${{ needs.build-and-push.outputs.backend-image }} --state-values-set=frontend.image.repository=${{ needs.build-and-push.outputs.frontend-image }} --state-values-set=contracts.image.repository=${{ needs.build-and-push.outputs.contracts-image }}"
  #         helmfile --environment staging --namespace bullpawn-staging $INPUT_VALUES apply --wait

  deploy-production:
    runs-on: ubuntu-latest
    # if: github.event_name == 'release' && github.event.action == 'released' && github.event.release.target_commitish == 'main'
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs:
      - build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Set up Helm
        uses: azure/setup-helm@v4.3.0
        with:
          version: 'v3.18.6'

      - name: Install Helm Diff plugin
        run: helm plugin install https://github.com/databus23/helm-diff --version 3.13.0

      - name: Install Helmfile
        run: |
          curl -L https://github.com/helmfile/helmfile/releases/download/v0.155.0/helmfile_0.155.0_linux_amd64.tar.gz | tar xz
          sudo mv helmfile /usr/local/bin/

      - name: Change directory
        run: |
          cd deploy/helm

      - name: Deploy sealed secrets
        run: |
          for file in ./sealed-secrets/production/sealed-*.yaml; do
            kubectl apply -f "$file"
          done

      - name: Run helmfile apply for production
        run: |
          INPUT_VALUES="--state-values-set=backend.image.repository=${{ needs.build-and-push.outputs.backend-image }} --state-values-set=frontend.image.repository=${{ needs.build-and-push.outputs.frontend-image }} --state-values-set=contracts.image.repository=${{ needs.build-and-push.outputs.contracts-image }}"
          helmfile --environment production --namespace bullpawn-production $INPUT_VALUES apply --wait

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.backend-image }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'