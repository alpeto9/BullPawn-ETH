name: Deploy Smart Contracts

on:
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  ZKSYNC_RPC_URL: "https://sepolia.era.zksync.dev"
  ZKSYNC_CHAIN_ID: "300"

permissions:
  id-token: write
  contents: read

jobs:
  deploy-contracts:
    name: Deploy Smart Contracts to zkSync
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        cd contracts
        npm install

    - name: Build contracts
      run: |
        cd contracts
        npm run build

    - name: Deploy contracts to zkSync
      id: deploy
      env:
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        USDT_CONTRACT_ADDRESS: "0x5C221E77624690fff6dd7412D22CCeB3F3167453"
        CHAINLINK_ETH_USD: "0xfEefF7c3fB57d18C5C6Cdd71e45D2D0b4F9377bF"
        CHAINLINK_BTC_USD: "0x95Bc57e794aeb02E4a16eff406147f3ce2531F83"
      run: |
        cd contracts
        npm run deploy 2>&1 | tee deployment.log

    - name: Extract contract addresses
      id: extract-addresses
      run: |
        cd contracts
        # Show the full deployment log for debugging
        echo "=== Full Deployment Log ==="
        cat deployment.log
        echo "=== End Deployment Log ==="
        
        # Extract addresses from the deployment log with more flexible patterns
        USDT_ADDRESS=$(grep -i "mockusdt.*address" deployment.log | grep -o "0x[a-fA-F0-9]\{40\}" | head -1)
        PAWN_ADDRESS=$(grep -i "pawnsystem.*address" deployment.log | grep -o "0x[a-fA-F0-9]\{40\}" | head -1)
        
        # If still empty, try alternative patterns
        if [ -z "$USDT_ADDRESS" ]; then
          USDT_ADDRESS=$(grep -o "0x[a-fA-F0-9]\{40\}" deployment.log | head -1)
        fi
        if [ -z "$PAWN_ADDRESS" ]; then
          PAWN_ADDRESS=$(grep -o "0x[a-fA-F0-9]\{40\}" deployment.log | tail -1)
        fi
        
        # Set outputs for use in subsequent steps
        echo "USDT_CONTRACT_ADDRESS=${USDT_ADDRESS}" >> $GITHUB_OUTPUT
        echo "PAWN_CONTRACT_ADDRESS=${PAWN_ADDRESS}" >> $GITHUB_OUTPUT
        echo "MULTI_ORACLE_ADDRESS=${PAWN_ADDRESS}" >> $GITHUB_OUTPUT
        echo "ETH_PRICE_FEED_ADDRESS=${PAWN_ADDRESS}" >> $GITHUB_OUTPUT
        echo "BTC_PRICE_FEED_ADDRESS=${PAWN_ADDRESS}" >> $GITHUB_OUTPUT
        
        # Display the extracted addresses
        echo "Extracted contract addresses:"
        echo "USDT: ${USDT_ADDRESS}"
        echo "PawnSystem: ${PAWN_ADDRESS}"